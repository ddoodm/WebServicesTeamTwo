package uts.wsd.teamtwo.rest;

import uts.wsd.teamtwo.*;
import uts.wsd.teamtwo.JAXB.*;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.ws.rs.*;
import javax.ws.rs.core.*;
import javax.xml.bind.JAXBException;

import org.xml.sax.SAXException;

@Path("")
public class ReviewRestService
{
	@Context
	ServletContext application;
	
	private static final String
		REVIEWS_DOCUMENT_PATH = "WEB-INF/reviews.xml",
		REVIEWS_SCHEMA_PATH = "WEB-INF/reviews.xsd";
	
	private ReviewApplication getReviewApp() throws JAXBException, IOException, SAXException
	{
		/* 
		 * Lock the application object so that threads from other
		 * simultaneous requests do not corrupt it.
		 */
		synchronized (application)
		{
			ReviewApplication reviewApp = (ReviewApplication) application.getAttribute("hotelApp");
			
			if (App == null)
			{
				reviewApp = new ReviewApplication();
				
				reviewApp.setFilePaths(
						application.getRealPath(REVIEWS_DOCUMENT_PATH),
						application.getRealPath(REVIEWS_SCHEMA_PATH));
				
				application.setAttribute("reviewApp", reviewApp);
				System.out.println("==== ReviewRestService.getReviewApp(): Instantiated a new ReviewApp.");
			}
			
			return reviewApp;
		}
	}
	
	private Reviews getReviews()
	{
		try
		{
			return getReviewApp().getReviews();
		}
		catch(Exception e)
		{
			System.out.println("==== ERROR: ReviewRestService.getReviews(): Could not get review app / reviews.");
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Generates a set of hotels, filtered by all (may be null) of the parameters.
	 * @param name The partial name of the matching hotel (match will <b>contain</b> 'name' in its name.
	 * @param country The country of the matching hotel.
	 * @return The set of hotels that has been filtered by the parameters.
	 */
	@Path("/reviews")
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public Reviews searchReviewss(
			@QueryParam("Hotel ID") String hotelID,
			@QueryParam("Start date") String startDate,
			@QueryParam("End Date") String endDate)
			@QueryParam("Rating") int rating)
	{
		// (Working hotel set)
		Reviews filteredReviews = getReviews();
		
		// Filter by the parameter(s) supplied
		if(hotelID != null && !hotelID.isEmpty())
			filteredReviews = filteredReviews.filterByhotelID(hotelID);
		
		if(startDate != null && !startDate.isEmpty())
		{
			filteredReviews = filteredReviews.filterBystartDate(startDate);
			
			// Filter by end date only if start date has been supplied
			if(endDate != null && !endDate.isEmpty())
				filteredReviews = filteredReviews.filterByendDate(endDate);
		}
		
		if(rating != null && !rating.isEmpty())
			filteredReviews = filteredReviews.filterByrating(rating);
		
		return filteredReviews;
	}
}

